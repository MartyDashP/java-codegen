plugins {
    id 'groovy'
    id 'maven-publish'
    id 'signing'
}

group 'io.github.martydashp.java_codegen'
archivesBaseName = 'gradle-plugin'
version '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation 'io.github.martydashp:java-codegen:1.0.0'
    implementation 'org.codehaus.groovy:groovy-all:3.0.8'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact javadocJar
            artifact sourcesJar

            groupId = "${project.group}"
            artifactId = "${project.archivesBaseName}"
            version = "${project.version}"

            pom {
                name = "${project.name}"
                description = "The gradle plugin for implementing task generating java code by specification Java Codegen"
                url = "https://github.com/MartyDashP/java-codegen/tree/main/plugins/java-codegen-gradle-plugin"

                scm {
                    connection = "scm:git:https://github.com/MartyDashP/java-codegen.git"
                    url = "https://github.com/MartyDashP/java-codegen.git"
                }

                developers {
                    developer {
                        id = "MartyDashP"
                        name = "Pavel Martynov"
                        email = "pavel.martynoff@gmail.com"
                    }
                }

                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/MartyDashP/java-codegen/blob/main/LICENSE"
                    }
                }
            }

            repositories {
                maven {
                    def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                    def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'

                    name = 'sonatype'
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username = findProperty("sonatype.username")
                        password = findProperty("sonatype.password")
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}
